server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;
    root /usr/share/nginx/html;

    access_log  /var/log/nginx/access.log  main;
    error_log    /var/log/nginx/test-error.log debug;
    rewrite_log on;

    ### ----- rewrite と try_files の検証用 -----
    location / {
        add_header uri $uri;
        add_header debug "location /";

        index  index.html index.htm;
    }

    location /tf {
        try_files $uri $uri/ /test.html;
    }

    location /rl {
        rewrite ^/rl(.*) $1 last;
    }

    location /rb {
       rewrite ^/rb(.*) $1 break;
    }

    location /rwl-tf {
        rewrite ^/rwl-tf(.*) $1 last;
        try_files $uri $uri/ /test.html;
    }

    location /rwb-tf {
        rewrite ^/rwb-tf(.*) $1 break;
        try_files $uri $uri/ /test.html;
    }
    ### ----- rewrite と try_files の検証用ここまで -----

    ### ----- 案1 -----
    # リクエストURLを変数に入れておく
    set $api_uri $request_uri;
    # /backend で来たら、FastCGI に送る正しい URI を保存しておく
    if ($request_uri ~ ^/backend(/.*)$) {
        set $api_uri $1;
    }

    location /backend/ {
        root /var/www/app/public;

        rewrite ^/backend(/.*)$ $1 break; # ここで $uri が書き換わる

        # このタイミングで
        # set $api_uri $uri
        # として再評価時に持ち越せるといいんだが、ディレクティブ内の変数は他のディレクティブでは使えない様子

        # ~/public + $uri のパスにファイルがあればそのまま返却、
        # なければ /index.php として location を再評価 (下の.phpディレクティブに入る)
        try_files $uri $uri/ /index.php?$query_string; 
    }

    # 上との動作の違いを確認する用
    location /api/ {
        root /var/www/app/public;
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        # デバッグ用にヘッダに値を出力
        add_header uri $uri; # $uri は index.php
        add_header fastcgi_script_name $fastcgi_script_name; # こいつも index.php
        add_header api_uri $api_uri;
        
        root /var/www/app/public;

        fastcgi_pass api:9000;
        fastcgi_index index.php;

        include fastcgi_params;
        # FastCGI に正しいリクエストURI（/backendなし）を教える
        # 仮に呼出時に /backend を付けられないエンドポイントがあっても、$request_uri がそのまま入っているのでOK
        fastcgi_param REQUEST_URI $api_uri;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

    ### ----- 案2 -----
    # location /backend/ {
    #     root /var/www/app/public;

    #     rewrite ^/backend(/.*)$ $1 break; # ここで $uri が書き換わる

    #     # ~/public + $uri のパスにファイルがあればそのまま返却、
    #     # なければ /backend/.../index.php として location を再評価 (下のディレクティブに入る)
    #     # /index.php にすると再評価でこのディレクティブ (/backend/) に入ってくれない
    #     try_files $uri $uri/ /backend$uri/index.php?$query_string;

    #     # location がネストしていると、子のディレクティブにマッチした際は親のディレクティブに書いた設定が無視されるので、
    #     # try_files が再評価時に実行されたりすることはない

    #     location ~ ^/backend(/.*)/(.+?\.php)$ { # $1, $2 に /backend 以下のパスと index.php が入る
    #         # デバッグ用にヘッダに値を出力
    #         add_header var1 $1;
    #         add_header var2 $2;
    #         add_header uri $uri; # $uri は /backend/.../index.php
    #         add_header fastcgi_script_name $fastcgi_script_name; # こいつも同じ

    #         root /var/www/app/public;

    #         fastcgi_pass api:9000;
    #         fastcgi_index index.php;
            
    #         include fastcgi_params;
    #         # FastCGI に正しいリクエストURI（/backendなし）を教える
    #         fastcgi_param REQUEST_URI $1;
    #         fastcgi_param SCRIPT_FILENAME $document_root/$2;
    #     }
    # }

    ### ----- 案3 -----
    # location /backend/ {
    #     # デバッグ用にヘッダに値を出力
    #     add_header uri $uri; # $uri には /backend/~ がそのまま入る
    #     add_header fastcgi_script_name $fastcgi_script_name; # こいつも同じ

    #     root /var/www/app/public;

    #     rewrite ^/backend(/.*)$ $1 break; # ここで $uri が書き換わる
        
    #     fastcgi_pass api:9000;
    #     fastcgi_index index.php;
        
    #     include fastcgi_params;
    #     # FastCGI に正しいリクエストURI（/backendなし）を教える
    #     fastcgi_param REQUEST_URI $uri;
    #     fastcgi_param SCRIPT_FILENAME  $document_root/index.php; # 案3だと $fastcgi_script_name がパスになってしまうので、直で index.php を指定
    # }

    # ----- 以下デフォルトのまま -----

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}